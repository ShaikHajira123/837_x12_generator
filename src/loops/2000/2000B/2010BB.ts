import { Address, RequestBody } from "../../../models/request.model";
import { formatObject } from "../../../utils/global";

/**
 * The function `generate2010BB` in TypeScript generates a formatted string based on claim data and
 * payer address information.
 * @param {RequestBody} claimData - The `claimData` parameter is an object that contains information
 * related to a claim, such as `tradingPartnerName` and `tradingPartnerServiceId`.
 * @param {Address | null} payerAddress - The `payerAddress` parameter in the `generate2010BB` function
 * is of type `Address | null`, which means it can either be an `Address` object or `null`. The
 * `Address` type likely contains properties such as `address1`, `city`, `state`, and `
 * @returns The function `generate2010BB` returns a formatted string based on the `claimData` and
 * `payerAddress` provided. The string is generated by mapping over an array of objects, formatting
 * each object, and joining them with a tilde (~) separator.
 */
export function generate2010BB(claimData: RequestBody, payerAddress: Address | null) {
    const data: any = [
        {
            "Segment": "NM1",
            "EntityIdentifierCode": "PR",
            "EntityTypeQualifier": "2",
            "PayerName": claimData?.tradingPartnerName ?? '',
            "Unknown1": '',
            "Unknown2": '',
            "Unknown3": '',
            "Unknown4": '',
            "IdentificationCodeQualifier": "PI",
            "IdentificationCode": claimData?.tradingPartnerServiceId
        }
    ]

    if (payerAddress?.address1) {
        data.push({
            "Segment": "N3",
            "AddressInformation": payerAddress?.address1 ?? ''
        })
    }

    if ((payerAddress?.city || payerAddress?.state || payerAddress?.zipcode)) {
        data.push({
            "Segment": "N4",
            "CityName": payerAddress?.city ?? '',
            "StateCode": payerAddress?.state ?? '',
            "PostalCode": payerAddress?.zipcode ?? '',
        })
    }

    // Format each object and join with '~'
    const formattedString = data.map(formatObject).join('~');
    return formattedString;
}