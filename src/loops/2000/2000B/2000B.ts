import { Address, RequestBody } from "../../../models/request.model";
import { formatObject } from "../../../utils/global";
import { generate2010BA } from "./2010BA";
import { generate2010BB } from "./2010BB";


/**
 * The function `generate2000B` generates a formatted string based on claim data and payer address.
 * @param {RequestBody} claimData - The `claimData` parameter is an object that contains information
 * related to a claim. It includes details about the subscriber, dependent, and claim information.
 * @param {Address | null} payerAddress - The `generate2000B` function takes in two parameters:
 * @returns The function `generate2000B` returns a formatted string that is generated by mapping over
 * an array of objects, formatting each object, and joining them with a tilde (~) delimiter. The
 * objects in the array include a HL segment and two loops (loop2010BA and loop2010BB) that are
 * generated by calling other functions `generate2010BA` and `generate2010BB
 */
export function generate2000B(claimData: RequestBody, payerAddress: Address | null) {
    const data = [
        {
            "Segment": "HL",
            "HierarchicalIDNumber": "2",
            "HierarchicalParentIDNumber": "1",
            "HierarchicalLevelCode": "22",
            "HierarchicalChildCode": "1"
        },
        { "loop2010BA": generate2010BA(claimData?.subscriber, claimData?.dependent, claimData?.claimInformation) },
        { "loop2010BB": generate2010BB(claimData, payerAddress) }

    ]

    // Format each object and join with '~'
    const formattedString = data.map(formatObject).join('~') + '~';
    return formattedString;
}